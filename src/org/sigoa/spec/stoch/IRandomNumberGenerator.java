/*
 * Copyright (c) 2006 Thomas Weise for sigoa
 * Simple Interface for Global Optimization Algorithms
 * http://www.sigoa.org/
 *
 * E-Mail           : info@sigoa.org
 * Creation Date    : 2006-11-28
 * Creator          : Thomas Weise
 * Original Filename: org.sigoa.spec.stoch.IRandomNumberGenerator.java
 * Last modification: 2006-11-28
 *                by: Thomas Weise
 *
 * License          : GNU LESSER GENERAL PUBLIC LICENSE
 *                    Version 2.1, February 1999
 *                    You should have received a copy of this license along
 *                    with this library; if not, write to theFree Software
 *                    Foundation, Inc. 51 Franklin Street, Fifth Floor,
 *                    Boston, MA 02110-1301, USA or download the license
 *                    under http://www.gnu.org/licenses/lgpl.html or
 *                    http://www.gnu.org/copyleft/lesser.html.
 *
 * Warranty         : This software is provided "as is" without any
 *                    warranty; without even the implied warranty of
 *                    merchantability or fitness for a particular purpose.
 *                    See the Gnu Lesser General Public License for more
 *                    details.
 */

package org.sigoa.spec.stoch;

import java.io.Serializable;


/**
 * A random number generator creates sequences of random numbers using a
 * certain distribution scheme. There can be random number generators for
 * any sort of distribution.
 *
 * @author Thomas Weise
 * @version 1.0.0
 */
public interface IRandomNumberGenerator extends Serializable {
  /**
   * Create the next item of the sequence of random numbers which are
   * generated by this random number generator.
   *
   * @return The next double in the sequence of random numbers.
   */
  public abstract double nextDouble();

  /**
   * Obtain an object that encapsulates this randomizer's current seed.
   *
   * @return an object that encapsulates the current seed.
   */
  public abstract Serializable getSeed();

  /**
   * Set the seed of this randomizer.
   *
   * @param seed
   *          the seed value for this randomizer.
   */
  public abstract void setSeed(final Serializable seed);

  /**
   * Set a default seed to this randomizer.
   */
  public abstract void setDefaultSeed();

}
